{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import des librairies\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "pd.set_option(\"max_colwidth\", 120)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1050, 15)\n"
     ]
    }
   ],
   "source": [
    "df_0 = pd.read_csv(\"flipkart_com-ecommerce_sample_1050.csv\")\n",
    "print(df_0.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>uniq_id</th>\n",
       "      <th>crawl_timestamp</th>\n",
       "      <th>product_url</th>\n",
       "      <th>product_name</th>\n",
       "      <th>product_category_tree</th>\n",
       "      <th>pid</th>\n",
       "      <th>retail_price</th>\n",
       "      <th>discounted_price</th>\n",
       "      <th>image</th>\n",
       "      <th>is_FK_Advantage_product</th>\n",
       "      <th>description</th>\n",
       "      <th>product_rating</th>\n",
       "      <th>overall_rating</th>\n",
       "      <th>brand</th>\n",
       "      <th>product_specifications</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>55b85ea15a1536d46b7190ad6fff8ce7</td>\n",
       "      <td>2016-04-30 03:22:56 +0000</td>\n",
       "      <td>http://www.flipkart.com/elegance-polyester-multicolor-abstract-eyelet-door-curtain/p/itmeg7bkzdgthcts?pid=CRNEG7BKMF...</td>\n",
       "      <td>Elegance Polyester Multicolor Abstract Eyelet Door Curtain</td>\n",
       "      <td>[\"Home Furnishing &gt;&gt; Curtains &amp; Accessories &gt;&gt; Curtains &gt;&gt; Elegance Polyester Multicolor Abstract Eyelet Do...\"]</td>\n",
       "      <td>CRNEG7BKMFFYHQ8Z</td>\n",
       "      <td>1899.0</td>\n",
       "      <td>899.0</td>\n",
       "      <td>55b85ea15a1536d46b7190ad6fff8ce7.jpg</td>\n",
       "      <td>False</td>\n",
       "      <td>Key Features of Elegance Polyester Multicolor Abstract Eyelet Door Curtain Floral Curtain,Elegance Polyester Multico...</td>\n",
       "      <td>No rating available</td>\n",
       "      <td>No rating available</td>\n",
       "      <td>Elegance</td>\n",
       "      <td>{\"product_specification\"=&gt;[{\"key\"=&gt;\"Brand\", \"value\"=&gt;\"Elegance\"}, {\"key\"=&gt;\"Designed For\", \"value\"=&gt;\"Door\"}, {\"key\"=&gt;...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7b72c92c2f6c40268628ec5f14c6d590</td>\n",
       "      <td>2016-04-30 03:22:56 +0000</td>\n",
       "      <td>http://www.flipkart.com/sathiyas-cotton-bath-towel/p/itmegfzhxbyucwgn?pid=BTWEGFZHGBXPHZUH</td>\n",
       "      <td>Sathiyas Cotton Bath Towel</td>\n",
       "      <td>[\"Baby Care &gt;&gt; Baby Bath &amp; Skin &gt;&gt; Baby Bath Towels &gt;&gt; Sathiyas Baby Bath Towels &gt;&gt; Sathiyas Cotton Bath Towel (3 Ba...</td>\n",
       "      <td>BTWEGFZHGBXPHZUH</td>\n",
       "      <td>600.0</td>\n",
       "      <td>449.0</td>\n",
       "      <td>7b72c92c2f6c40268628ec5f14c6d590.jpg</td>\n",
       "      <td>False</td>\n",
       "      <td>Specifications of Sathiyas Cotton Bath Towel (3 Bath Towel, Red, Yellow, Blue) Bath Towel Features Machine Washable ...</td>\n",
       "      <td>No rating available</td>\n",
       "      <td>No rating available</td>\n",
       "      <td>Sathiyas</td>\n",
       "      <td>{\"product_specification\"=&gt;[{\"key\"=&gt;\"Machine Washable\", \"value\"=&gt;\"Yes\"}, {\"key\"=&gt;\"Material\", \"value\"=&gt;\"Cotton\"}, {\"ke...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            uniq_id            crawl_timestamp  \\\n",
       "0  55b85ea15a1536d46b7190ad6fff8ce7  2016-04-30 03:22:56 +0000   \n",
       "1  7b72c92c2f6c40268628ec5f14c6d590  2016-04-30 03:22:56 +0000   \n",
       "\n",
       "                                                                                                               product_url  \\\n",
       "0  http://www.flipkart.com/elegance-polyester-multicolor-abstract-eyelet-door-curtain/p/itmeg7bkzdgthcts?pid=CRNEG7BKMF...   \n",
       "1                               http://www.flipkart.com/sathiyas-cotton-bath-towel/p/itmegfzhxbyucwgn?pid=BTWEGFZHGBXPHZUH   \n",
       "\n",
       "                                                 product_name  \\\n",
       "0  Elegance Polyester Multicolor Abstract Eyelet Door Curtain   \n",
       "1                                  Sathiyas Cotton Bath Towel   \n",
       "\n",
       "                                                                                                     product_category_tree  \\\n",
       "0         [\"Home Furnishing >> Curtains & Accessories >> Curtains >> Elegance Polyester Multicolor Abstract Eyelet Do...\"]   \n",
       "1  [\"Baby Care >> Baby Bath & Skin >> Baby Bath Towels >> Sathiyas Baby Bath Towels >> Sathiyas Cotton Bath Towel (3 Ba...   \n",
       "\n",
       "                pid  retail_price  discounted_price  \\\n",
       "0  CRNEG7BKMFFYHQ8Z        1899.0             899.0   \n",
       "1  BTWEGFZHGBXPHZUH         600.0             449.0   \n",
       "\n",
       "                                  image  is_FK_Advantage_product  \\\n",
       "0  55b85ea15a1536d46b7190ad6fff8ce7.jpg                    False   \n",
       "1  7b72c92c2f6c40268628ec5f14c6d590.jpg                    False   \n",
       "\n",
       "                                                                                                               description  \\\n",
       "0  Key Features of Elegance Polyester Multicolor Abstract Eyelet Door Curtain Floral Curtain,Elegance Polyester Multico...   \n",
       "1  Specifications of Sathiyas Cotton Bath Towel (3 Bath Towel, Red, Yellow, Blue) Bath Towel Features Machine Washable ...   \n",
       "\n",
       "        product_rating       overall_rating     brand  \\\n",
       "0  No rating available  No rating available  Elegance   \n",
       "1  No rating available  No rating available  Sathiyas   \n",
       "\n",
       "                                                                                                    product_specifications  \n",
       "0  {\"product_specification\"=>[{\"key\"=>\"Brand\", \"value\"=>\"Elegance\"}, {\"key\"=>\"Designed For\", \"value\"=>\"Door\"}, {\"key\"=>...  \n",
       "1  {\"product_specification\"=>[{\"key\"=>\"Machine Washable\", \"value\"=>\"Yes\"}, {\"key\"=>\"Material\", \"value\"=>\"Cotton\"}, {\"ke...  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_0.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1050 entries, 0 to 1049\n",
      "Data columns (total 15 columns):\n",
      " #   Column                   Non-Null Count  Dtype  \n",
      "---  ------                   --------------  -----  \n",
      " 0   uniq_id                  1050 non-null   object \n",
      " 1   crawl_timestamp          1050 non-null   object \n",
      " 2   product_url              1050 non-null   object \n",
      " 3   product_name             1050 non-null   object \n",
      " 4   product_category_tree    1050 non-null   object \n",
      " 5   pid                      1050 non-null   object \n",
      " 6   retail_price             1049 non-null   float64\n",
      " 7   discounted_price         1049 non-null   float64\n",
      " 8   image                    1050 non-null   object \n",
      " 9   is_FK_Advantage_product  1050 non-null   bool   \n",
      " 10  description              1050 non-null   object \n",
      " 11  product_rating           1050 non-null   object \n",
      " 12  overall_rating           1050 non-null   object \n",
      " 13  brand                    712 non-null    object \n",
      " 14  product_specifications   1049 non-null   object \n",
      "dtypes: bool(1), float64(2), object(12)\n",
      "memory usage: 116.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df_0.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Identification du nombre de catégorie des produits:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'[\"Home Furnishing >> Curtains & Accessories >> Curtains >> Elegance Polyester Multicolor Abstract Eyelet Do...\"]'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# visualisation d'un élément de (product_category_tree)\n",
    "df_0[\"product_category_tree\"][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "for x, y in df_0[\"product_category_tree\"].iteritems():\n",
    "    pos= y.find('>>')\n",
    "    sousChaine = y[2:pos]\n",
    "    df_0.loc[x,\"product_category\"]= sousChaine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       Home Furnishing \n",
       "1             Baby Care \n",
       "2             Baby Care \n",
       "3       Home Furnishing \n",
       "4       Home Furnishing \n",
       "              ...       \n",
       "1045          Baby Care \n",
       "1046          Baby Care \n",
       "1047          Baby Care \n",
       "1048          Baby Care \n",
       "1049          Baby Care \n",
       "Name: product_category, Length: 1050, dtype: object"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_0[\"product_category\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Home Furnishing ', 'Baby Care ', 'Watches ',\n",
       "       'Home Decor & Festive Needs ', 'Kitchen & Dining ',\n",
       "       'Beauty and Personal Care ', 'Computers '], dtype=object)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_0[\"product_category\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_0[\"product_category\"].unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Le nombre des catégories de produit est de: 7\n",
    "'Home Furnishing', 'Baby Care ', 'Watches', 'Home Decor & Festive Needs', 'Kitchen & Dining', 'Beauty and Personal Care', 'Computers'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "object     13\n",
       "float64     2\n",
       "bool        1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_0.dtypes.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "uniq_id                    1050\n",
       "crawl_timestamp             149\n",
       "product_url                1050\n",
       "product_name               1050\n",
       "product_category_tree       642\n",
       "pid                        1050\n",
       "retail_price                354\n",
       "discounted_price            424\n",
       "image                      1050\n",
       "is_FK_Advantage_product       2\n",
       "description                1050\n",
       "product_rating               27\n",
       "overall_rating               27\n",
       "brand                       490\n",
       "product_specifications      984\n",
       "product_category              7\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_0.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "uniq_id                      0\n",
       "crawl_timestamp              0\n",
       "product_url                  0\n",
       "product_name                 0\n",
       "product_category_tree        0\n",
       "pid                          0\n",
       "image                        0\n",
       "is_FK_Advantage_product      0\n",
       "description                  0\n",
       "product_rating               0\n",
       "overall_rating               0\n",
       "product_category             0\n",
       "retail_price                 1\n",
       "discounted_price             1\n",
       "product_specifications       1\n",
       "brand                      338\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_0.isna().sum().sort_values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1cff7890b08>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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Qpt05vX5lsX2m7qkSedXrFihZ555RuXl5erXr5+WLVumESPO/xHXt956S08//bT27dun4OBgjRkzRkuXLlVoaGijn+mxmc4AAAAAAAAAAOusXr1aKSkpeuSRR7Rjxw6NGDFCCQkJKi0tbfD85s2bNWXKFM2YMUOff/653nnnHRUVFWnmzJlNei5FZwAAAAAAAAAwk9Np3WqCZ599VjNmzNDMmTPVp08fLVu2TN26dVNmZmaD57du3aru3btr7ty56tGjh4YPH65Zs2Zp+/btTXouRWcAAAAAAAAAaCMcDodOnjzpthwOR71z586dU3FxseLj49324+Pj9emnnzYYe9iwYTp06JDWr18vwzB05MgRvfvuuxo7dmyTcqToDAAAAAAAAABmsrDTOSMjQ8HBwW4rIyOjXgrfffed6urq1LlzZ7f9zp07q6KiosG0hw0bprfeekuJiYny9fVVeHi4OnbsqD/96U9Nen3Ti84ZGRm65pprFBgYqLCwME2cOFF79uxxXa+pqdHDDz+sAQMGyN/fX5GRkZoyZYrKysoajGcYhhISEmSz2ZSTk2N2ugAAAAAAAADQZqSnp6uystJtpaenn/e8zWZz+20YRr29H33xxReaO3eu/t//+38qLi5WXl6eDhw4oPvvv79JOfo06XQjFBYWavbs2brmmmtUW1urRx55RPHx8friiy/k7++v06dPq6SkRAsXLtSgQYN04sQJpaSkaPz48Q3OBlm2bNl5/wgAAAAAAAAA0OoYTZu93BR2u112u/0nz3Xq1Ene3t71upqPHj1ar/v5RxkZGbr++us1b948SdLAgQPl7++vESNG6IknnlBERESjcjS96JyXl+f2+9VXX1VYWJiKi4t1ww03KDg4WPn5+W5n/vSnP+naa69VaWmpoqKiXPufffaZnn32WRUVFTX6hQAAAAAAAADAkwyn4ekU5OvrqyFDhig/P1+TJk1y7efn52vChAkN3nP69Gn5+LiXjL29vSX90CHdWJbPdK6srJQkhYSEXPCMzWZTx44dXXunT5/Wr371Ky1fvlzh4eFWpwkAAAAAAAAAF5W0tDS9/PLLeuWVV/Tll18qNTVVpaWlrnEZ6enpmjJliuv8uHHj9Le//U2ZmZnav3+//uu//ktz587Vtddeq8jIyEY/1/RO539lGIbS0tI0fPhw9e/fv8EzZ8+e1fz5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XV1ER0fLt2dkZCA5ORkdOnRQ+VzBwcHIyclReMi0TNT3wxERERERERERERGRErW01zh06BAEQYCLiwtSU1MxY8YMuLi4YMyYMQCAGTNmYPDgwejSpQs8PT1x8OBB/Prrrzh27BgAwMzMDGPHjsW0adNQu3ZtWFpaYvr06XB3d0f37t1VPqe+vj709fUVxthag4iIiIiIiIiIiKpbiYb0XlYXtRSdc3JyEBwcjLt378LS0hIDBw7EwoULoaurCwDo378/1q1bh8WLF2PKlClwcXHBrl270KlTJ/kxwsLCoKOjg0GDBuH58+fo1q0bNm3aBG1tbXVEJiIiIiIiIiIiIqIqIBMEocaW3XX06osdgYiIiIiIiIiISGMVvbgndgSN1MDSXW3HTn98SW3HripqmelMRERERERERERE9LZ629trqHUhQSIiIiIiIiIiIiJ6u3CmMxEREREREREREVEVqsEdjctFLTOdnz59iqlTp8Le3h6Ghobo0KEDzp07J9/+4MEDjB49Gra2tjAyMkLPnj1x/fp1+fbHjx/D398fLi4uMDIyQoMGDTBlyhTk5OSoIy4RERERERERERERVRG1FJ3HjRuH6OhoRERE4NKlS/Dy8kL37t1x7949CIKAfv364caNG9i7dy8SEhJgb2+P7t27Iy8vDwBw//593L9/H6Ghobh06RI2bdqEgwcPYuzYseqIS0RERERERERERFRlSgRBbQ9NIBOqeK738+fPYWJigr1798Lb21s+3rJlS/Tp0wejRo2Ci4sLkpOT0bRpUwBAcXEx6tati6VLl2LcuHEqj7tjxw6MGDECeXl50NEpX1cQHb36//0HIiIiIiIiIiK1eX7/hNgRNJKhbWexI9BboujFPbEjaCQbcze1HTsj+0+1HbuqVPlM56KiIhQXF8PAwEBh3NDQELGxsSgoKAAAhe3a2trQ09NDbGxsmcfNycmBqalpuQvORERERERERCR9LJ4SUU0kqPE/TVDlFVwTExO0b98e8+fPh6urK6ytrREZGYkzZ86gUaNGaNKkCezt7REcHIz169ejVq1aWLFiBTIzM5GRkaHymI8ePcL8+fMxceLEqo5LRERERERERCJj4ZmIqGZRS0/niIgICIKA+vXrQ19fH6tWrcKwYcOgra0NXV1d7Nq1C9euXYOlpSWMjIxw7Ngx9OrVC9ra2krHys3N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\n",
      "text/plain": [
       "<Figure size 2000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax= plt.subplots(1,1,figsize=(20,6))\n",
    "sns.heatmap(df_0.isna())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_1= df_0[['description','product_category']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Key Features of Elegance Polyester Multicolor Abstract Eyelet Door Curtain Floral Curtain,Elegance Polyester Multico...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Specifications of Sathiyas Cotton Bath Towel (3 Bath Towel, Red, Yellow, Blue) Bath Towel Features Machine Washable ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                               description\n",
       "0  Key Features of Elegance Polyester Multicolor Abstract Eyelet Door Curtain Floral Curtain,Elegance Polyester Multico...\n",
       "1  Specifications of Sathiyas Cotton Bath Towel (3 Bath Towel, Red, Yellow, Blue) Bath Towel Features Machine Washable ..."
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_1['description'].to_frame().head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1048</th>\n",
       "      <td>Buy Wallmantra Medium Vinyl Sticker Sticker for Rs.1333 online. Wallmantra Medium Vinyl Sticker Sticker at best pric...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1049</th>\n",
       "      <td>Buy Uberlyfe Large Vinyl Sticker for Rs.595 online. Uberlyfe Large Vinyl Sticker at best prices with FREE shipping &amp;...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                                  description\n",
       "1048  Buy Wallmantra Medium Vinyl Sticker Sticker for Rs.1333 online. Wallmantra Medium Vinyl Sticker Sticker at best pric...\n",
       "1049  Buy Uberlyfe Large Vinyl Sticker for Rs.595 online. Uberlyfe Large Vinyl Sticker at best prices with FREE shipping &..."
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_1['description'].to_frame().tail(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>Sovam International Radha Krishna God Showpiece  -  6 cm (Brass, White)\\r\\n                         Price: Rs. 1,899...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>505</th>\n",
       "      <td>Maxima 24990LMLI Swarovski Analog Watch  - For Women - Buy Maxima 24990LMLI Swarovski Analog Watch  - For Women  249...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000</th>\n",
       "      <td>Key Features of Lock&amp;Lock Kitchen  - 5.5 L Polypropylene Multi-purpose Storage Container Airtight Pack of 6,Lock&amp;Loc...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>309</th>\n",
       "      <td>Buy Infinity India Antique Gemstone Brass Surahi Handicraft Gift -1001 Showpiece  -  10 cm for Rs.750 online. Infini...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>509</th>\n",
       "      <td>Maxima 17321CMLY Gold Analog Watch  - For Women - Buy Maxima 17321CMLY Gold Analog Watch  - For Women  17321CMLY Onl...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>428</th>\n",
       "      <td>Specifications of Graco LiteRider Click Connect � Marco (Multicolor) General Foldable Yes Age Group 0 - 3 Years Type...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>948</th>\n",
       "      <td>Arabian Nights Soex Cranberry Assorted Hookah Flavor (500 g)\\r\\n                         Price: Rs. 800\\r\\n\\t\\t\\t\\t\\...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>Buy Vedic Deals Couple Radium Statues Showpiece  -  28 cm for Rs.499 online. Vedic Deals Couple Radium Statues Showp...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>719</th>\n",
       "      <td>Flipkart.com is offering Pompom Sweethearts Velcro U Shape Nappy Set Of 5 for only for Rs 279 | Flipkart.com. Only G...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1018</th>\n",
       "      <td>Key Features of PRINT SHAPES Sony headphone Laptop Skin with Mouse pad Combo Set Glue Free Removal 15.6 inches Lapto...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                                  description\n",
       "232   Sovam International Radha Krishna God Showpiece  -  6 cm (Brass, White)\\r\\n                         Price: Rs. 1,899...\n",
       "505   Maxima 24990LMLI Swarovski Analog Watch  - For Women - Buy Maxima 24990LMLI Swarovski Analog Watch  - For Women  249...\n",
       "1000  Key Features of Lock&Lock Kitchen  - 5.5 L Polypropylene Multi-purpose Storage Container Airtight Pack of 6,Lock&Loc...\n",
       "309   Buy Infinity India Antique Gemstone Brass Surahi Handicraft Gift -1001 Showpiece  -  10 cm for Rs.750 online. Infini...\n",
       "509   Maxima 17321CMLY Gold Analog Watch  - For Women - Buy Maxima 17321CMLY Gold Analog Watch  - For Women  17321CMLY Onl...\n",
       "428   Specifications of Graco LiteRider Click Connect � Marco (Multicolor) General Foldable Yes Age Group 0 - 3 Years Type...\n",
       "948   Arabian Nights Soex Cranberry Assorted Hookah Flavor (500 g)\\r\\n                         Price: Rs. 800\\r\\n\\t\\t\\t\\t\\...\n",
       "986   Buy Vedic Deals Couple Radium Statues Showpiece  -  28 cm for Rs.499 online. Vedic Deals Couple Radium Statues Showp...\n",
       "719   Flipkart.com is offering Pompom Sweethearts Velcro U Shape Nappy Set Of 5 for only for Rs 279 | Flipkart.com. Only G...\n",
       "1018  Key Features of PRINT SHAPES Sony headphone Laptop Skin with Mouse pad Combo Set Glue Free Removal 15.6 inches Lapto..."
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_1['description'].to_frame().sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1050 entries, 0 to 1049\n",
      "Data columns (total 1 columns):\n",
      " #   Column       Non-Null Count  Dtype \n",
      "---  ------       --------------  ----- \n",
      " 0   description  1050 non-null   object\n",
      "dtypes: object(1)\n",
      "memory usage: 8.3+ KB\n"
     ]
    }
   ],
   "source": [
    "df_1['description'].to_frame().info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_1['description'].to_frame().duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Key Features of Elegance Polyester Multicolor Abstract Eyelet Door Curtain Floral Curtain,Elegance Polyester Multico...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                                    description\n",
       "count                                                                                                                      1050\n",
       "unique                                                                                                                     1050\n",
       "top     Key Features of Elegance Polyester Multicolor Abstract Eyelet Door Curtain Floral Curtain,Elegance Polyester Multico...\n",
       "freq                                                                                                                          1"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_1['description'].to_frame().describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1cff857dd88>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tmp= df_1['description'].to_frame().description.str.len()\n",
    "sns.boxplot(tmp,showmeans=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\marat\\anaconda3\\envs\\env_1\\lib\\site-packages\\ipykernel_launcher.py:1: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1cff8235a88>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(tmp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Possibilité d'ajouter une colonne avec le nombre de caractères: df['x_length_text']= tmp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exploration du corpus et documents:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>Buy NEHP NEH006 Showpiece  -  38.1 cm for Rs.499 online. NEHP NEH006 Showpiece  -  38.1 cm at best prices with FREE ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>701</th>\n",
       "      <td>Buy Sapatos Plain Single Duvet White at Rs. 1499 at Flipkart.com. Only Genuine Products. Free Shipping. Cash On Deli...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>451</th>\n",
       "      <td>Key Features of Lushomes Plain Back Cushion Available in various color options and packing combination to suit every...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>633</th>\n",
       "      <td>Key Features of Jacadi Paris Baby Girl's Gathered Dark Blue Dress Cotton dress,Jacadi Paris Baby Girl's Gathered Dar...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>316</th>\n",
       "      <td>Flipkart.com: Buy Wild Stone Smoke And Juice Combo Set online only for Rs. 350 from Flipkart.com. Only Genuine Produ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>183</th>\n",
       "      <td>Rockmantra Blue Water Abstracts Ceramic Mug (5.5 l)\\r\\n                         Price: Rs. 199\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>545</th>\n",
       "      <td>Kool Kidz DMK-011-PK 01 Analog Watch  - For Boys, Girls - Buy Kool Kidz DMK-011-PK 01 Analog Watch  - For Boys, Girl...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>812</th>\n",
       "      <td>Buy Raymond Abstract Double Blanket Grey at Rs. 8999 at Flipkart.com. Only Genuine Products. Free Shipping. Cash On ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>439</th>\n",
       "      <td>Specifications of JewelKraft Designs Brown, Pink Table Linen Set General Brand JewelKraft Designs Design Code MN Sty...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144</th>\n",
       "      <td>Rockmantra Tele PhoneRMMW50000160 Ceramic Mug (5.5 l)\\r\\n                         Price: Rs. 199\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                                 description\n",
       "194  Buy NEHP NEH006 Showpiece  -  38.1 cm for Rs.499 online. NEHP NEH006 Showpiece  -  38.1 cm at best prices with FREE ...\n",
       "701  Buy Sapatos Plain Single Duvet White at Rs. 1499 at Flipkart.com. Only Genuine Products. Free Shipping. Cash On Deli...\n",
       "451  Key Features of Lushomes Plain Back Cushion Available in various color options and packing combination to suit every...\n",
       "633  Key Features of Jacadi Paris Baby Girl's Gathered Dark Blue Dress Cotton dress,Jacadi Paris Baby Girl's Gathered Dar...\n",
       "316  Flipkart.com: Buy Wild Stone Smoke And Juice Combo Set online only for Rs. 350 from Flipkart.com. Only Genuine Produ...\n",
       "183  Rockmantra Blue Water Abstracts Ceramic Mug (5.5 l)\\r\\n                         Price: Rs. 199\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t...\n",
       "545  Kool Kidz DMK-011-PK 01 Analog Watch  - For Boys, Girls - Buy Kool Kidz DMK-011-PK 01 Analog Watch  - For Boys, Girl...\n",
       "812  Buy Raymond Abstract Double Blanket Grey at Rs. 8999 at Flipkart.com. Only Genuine Products. Free Shipping. Cash On ...\n",
       "439  Specifications of JewelKraft Designs Brown, Pink Table Linen Set General Brand JewelKraft Designs Design Code MN Sty...\n",
       "144  Rockmantra Tele PhoneRMMW50000160 Ceramic Mug (5.5 l)\\r\\n                         Price: Rs. 199\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t..."
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# On sélectionne quelques documents du corpus \n",
    "df_1_samp = df_1['description'].to_frame().sample(10)\n",
    "df_1_samp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Buy NEHP NEH006 Showpiece  -  38.1 cm for Rs.499 online. NEHP NEH006 Showpiece  -  38.1 cm at best prices with FREE shipping & cash on delivery. Only Genuine Products. 30 Day Replacement Guarantee.\n",
      "\n",
      "\n",
      "Buy Sapatos Plain Single Duvet White at Rs. 1499 at Flipkart.com. Only Genuine Products. Free Shipping. Cash On Delivery!\n",
      "\n",
      "\n",
      "Key Features of Lushomes Plain Back Cushion Available in various color options and packing combination to suit every décor need. Super soft and fluffy. Uber stylish cushions to take you from the ordinary to the extra ordinary. Package Contents: 5 Cushions with fancy buttons Size: 16 inch x 16 inch or 40 cm x 40 cm,Lushomes Plain Back Cushion (Pack of5, Brown) Price: Rs. 1,599 Elevate your living with theseuberstylish cushions which come with coordinating buttons. The multi-tone fabric leaves the guest amazed whereas the fantastic design goes with any home décor setting. The variety of color options will leave you greedy for more. They are filled with high quality hollow siliconised polyester and stitched to perfection. Available in different sizes and packing combinations to vivify your homes. As we have vacuum packed it, kindly get it out of the poly bag and blow some direct air to make your lounge or any bedroom look fabulous.,Specifications of Lushomes Plain Back Cushion (Pack of5, Brown) General External Material Velvet Brand Lushomes Type Back Cushion Model Name Fancy Buttons Filling Material Polyester Fibre Model ID PLBF16P5-1010 Pillow Design Cushions with Buttons Color Brown Dimensions Weight 880 g Length 40 cm Width 40 cm Depth 2 cm In the Box Number of Contents in Sales Package 5 Sales Package 5 Cushions with Buttons\n",
      "\n",
      "\n",
      "Key Features of Jacadi Paris Baby Girl's Gathered Dark Blue Dress Cotton dress,Jacadi Paris Baby Girl's Gathered Dark Blue Dress Price: Rs. 5,099 This cotton dress is finished with flap neck detail. Bow detail with Easy snap closures at the back neck.,Specifications of Jacadi Paris Baby Girl's Gathered Dark Blue Dress In The Box 1 Flap neck cotton dress Dimensions Length Midi/Knee Length General Details Pattern Solid Occasion Casual Ideal For Baby Girl's Dress Details Number of Contents in Sales Package Pack of 1 Fabric 100% cotton Type Gathered\n",
      "\n",
      "\n",
      "Flipkart.com: Buy Wild Stone Smoke And Juice Combo Set online only for Rs. 350 from Flipkart.com. Only Genuine Products. 30 Day Replacement Guarantee. Free Shipping. Cash On Delivery!\n",
      "\n",
      "\n",
      "Rockmantra Blue Water Abstracts Ceramic Mug (5.5 l)\n",
      "                         Price: Rs. 199\n",
      "\t\t\t\t\n",
      "Size : 3.5\" X 4\"icg yet fresh start to your day. An exclusive creation by Rockmantra, this mug features porcelain crafting ensuring the design stays permanent for years to come and making it a perfect pick to gift your loved ones too!Dishwasher and microwave safe. Product details and specifications :\n",
      "Size : 3.5\" X 4\"icet fresh start to your day. An exclusive creation by Rockmantra, this mug features porcelain crafting ensuring the design stays permanent for years to come and making it a perfect pick to gift your loved ones too!Dishwasher and microwave safe. Product details and specifications :\n",
      "\n",
      "\n",
      "Kool Kidz DMK-011-PK 01 Analog Watch  - For Boys, Girls - Buy Kool Kidz DMK-011-PK 01 Analog Watch  - For Boys, Girls  DMK-011-PK 01 Online at Rs.476 in India Only at Flipkart.com. Multi-color Strap, Round Dial, Metal Case - Great Discounts, Only Genuine Products, 30 Day Replacement Guarantee, Free Shipping. Cash On Delivery!\n",
      "\n",
      "\n",
      "Buy Raymond Abstract Double Blanket Grey at Rs. 8999 at Flipkart.com. Only Genuine Products. Free Shipping. Cash On Delivery!\n",
      "\n",
      "\n",
      "Specifications of JewelKraft Designs Brown, Pink Table Linen Set General Brand JewelKraft Designs Design Code MN Style Code 411 Color Brown, Pink In the Box Sales Package 6 table mats 6 napkins\n",
      "\n",
      "\n",
      "Rockmantra Tele PhoneRMMW50000160 Ceramic Mug (5.5 l)\n",
      "                         Price: Rs. 199\n",
      "\t\t\t\t\n",
      "Size : 3.5\" X 4\"icg yet fresh start to your day. An exclusive creation by Rockmantra, this mug features porcelain crafting ensuring the design stays permanent for years to come and making it a perfect pick to gift your loved ones too!Dishwasher and microwave safe. Product details and specifications :\n",
      "Size : 3.5\" X 4\"icet fresh start to your day. An exclusive creation by Rockmantra, this mug features porcelain crafting ensuring the design stays permanent for years to come and making it a perfect pick to gift your loved ones too!Dishwasher and microwave safe. Product details and specifications :\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# On visualise les documents séléctionnés:\n",
    "for idx, ser in df_1_samp.iterrows() :\n",
    "    print(ser[\"description\"])\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'pandarallel'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_12788\\2811274146.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     20\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     21\u001b[0m \u001b[1;31m#simple and efficient tool to parallelize Pandas operations on all available CPUs\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 22\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mpandarallel\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mpandarallel\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     23\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     24\u001b[0m \u001b[1;31m#import spacy\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'pandarallel'"
     ]
    }
   ],
   "source": [
    "#builtin\n",
    "import os, sys, time, random\n",
    "\n",
    "# NLP\n",
    "#NLTK Tokenizer Package: Tokenizers divide strings into lists of substrings.\n",
    "import nltk\n",
    "from nltk.tokenize import word_tokenize, wordpunct_tokenize\n",
    "from nltk.tokenize import RegexpTokenizer\n",
    "from nltk.corpus import words\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import WordNetLemmatizer, PorterStemmer\n",
    "\n",
    "\n",
    "#viz\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Python Imaging Library, that enabled Python to deal with images\n",
    "from PIL import Image\n",
    "\n",
    "#simple and efficient tool to parallelize Pandas operations on all available CPUs\n",
    "from pandarallel import pandarallel\n",
    "\n",
    "#import spacy\n",
    "#from wordcloud import Wordcloud"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Downloads:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"NLTK's Wordnet and Open Multilingual Wordnet (\"OMW\") share a common function, \n",
    "but produce output of differing types\"\"\"\n",
    "nltk.download('omw-1.4')\n",
    "\n",
    "\"\"\" The WordNet is a part of Python's Natural Language Toolkit. It is a large \n",
    "word database of English Nouns, Adjectives, Adverbs and Verbs.\"\"\"\n",
    "nltk.download('wordnet')\n",
    "\n",
    "\"\"\" Stop words are a set of commonly used words in a language. Examples of stop words in English are\n",
    "“a”, “the”, “is”, “are” and etc\"\"\"\n",
    "nltk.download('stopwords')\n",
    "\n",
    "nltk.download('words')\n",
    "nltk.download('punkt')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### On travail sur un simple document:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "doc= df_1['description'].to_frame().description.sample(1)\n",
    "doc= doc.values[0]\n",
    "doc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#lower\n",
    "doc= doc.lower()\n",
    "doc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### word_tokenize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Tokenize\n",
    "tokens= word_tokenize(doc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(tokens)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(set(tokens))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def display_tokens_info(tokens):\n",
    "    \"\"\" display info about corpus\"\"\"\n",
    "    print(f\"nb tokens {len(tokens)}, nb tokens uniques {len(set(tokens))}\")\n",
    "    print(tokens[:30])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### wordpunct_tokenize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# another tokenize:\n",
    "tokens= wordpunct_tokenize(doc)\n",
    "display_tokens_info(tokens)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#stop_words\n",
    "stop_words= set(stopwords.words('english'))\n",
    "print(stop_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "tokens= [w for w in tokens if w not in stop_words]\n",
    "display_tokens_info(tokens)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### RegexpTokenizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# another tokenizer\n",
    "tokenizer= RegexpTokenizer(r\"\\w+\")\n",
    "tokens= tokenizer.tokenize(doc)\n",
    "display_tokens_info(tokens)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove stopwords\n",
    "tokens= [w for w in tokens if w not in stop_words]\n",
    "display_tokens_info(tokens)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Définition de la fonction process_text_0(): Tokenizer + lower"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def process_text_0(doc,rejoin=False):\n",
    "    \"\"\"Basic function of text processing\"\"\"\n",
    "    #lower\n",
    "    doc= doc.lower().strip()\n",
    "    \n",
    "    #Tokenize\n",
    "    tokenizer= RegexpTokenizer(r\"\\w+\")\n",
    "    raw_tokens_list= tokenizer.tokenize(doc)\n",
    "      \n",
    "    if rejoin: \n",
    "        return \" \".join(raw_tokens_list)\n",
    "    \n",
    "    return raw_tokens_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Définition de la fonction process_text_1(): Tokenizer + lower + cleaned (stop words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def process_text_1(doc,rejoin=False):\n",
    "    \"\"\"Basic function of text processing\"\"\"\n",
    "    #lower\n",
    "    doc= doc.lower().strip()\n",
    "    \n",
    "    #Tokenize\n",
    "    tokenizer= RegexpTokenizer(r\"\\w+\")\n",
    "    raw_tokens_list= tokenizer.tokenize(doc)\n",
    "    \n",
    "    #stop_words\n",
    "    cleaned_tokens_list= [w for w in raw_tokens_list if w not in stop_words]\n",
    "    \n",
    "    if rejoin: \n",
    "        return \" \".join(cleaned_tokens_list)\n",
    "    \n",
    "    return cleaned_tokens_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "tokens= process_text_1(doc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "display_tokens_info(tokens)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Application sur tout le corpus (colonne description):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "raw_corpus1= \" \".join(df_1.description.values)\n",
    "raw_corpus1[:1_000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(raw_corpus1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# process the corpus\n",
    "corpus= process_text_1(raw_corpus1)\n",
    "display_tokens_info(corpus)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#value counts\n",
    "tmp= pd.Series(corpus).value_counts()\n",
    "tmp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Top 30 des tokens les plus fréquents:\n",
    "tmp.head(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "tmp.tail(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "tmp.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.boxplot(tmp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Liste des tokens rares:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Uniques words --> not usefull\n",
    "tmp= pd.Series(corpus).value_counts()\n",
    "list_unique_words= tmp[tmp==1]\n",
    "list_unique_words[:30]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(list_unique_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_unique_words= list(list_unique_words.index)\n",
    "list_unique_words[:30]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#save it for later:\n",
    "tmp= pd.DataFrame({\"words\" : list_unique_words})\n",
    "tmp.to_csv(\"unique_words_1.csv\",index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Cleaning function 2:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def process_text_2(doc,rejoin=False,list_rare_words= None, min_len_word= 3, force_is_alpha= True):\n",
    "    \"\"\"cf process_text_1 but with list_rare_words, min_len_word, force_is_alpha    \n",
    "    arguments:\n",
    "    ---------\n",
    "    doc: str: the document to process\n",
    "    opts args:\n",
    "    ----------\n",
    "    rejoin: bool: if True return a string else return the list of tokens \n",
    "    list_rare_words: list: a list of rare words to exclude\n",
    "    min_len_word: int: if 1: excldue all tokens with a numeric character\n",
    "    return: \n",
    "    -------\n",
    "    a string (if rejoin is True) or a list of tokens\n",
    "    \"\"\"\n",
    "    \n",
    "    #lis of unique words\n",
    "    if not list_rare_words:\n",
    "        list_rare_words= []\n",
    "        \n",
    "    #lower\n",
    "    doc= doc.lower().strip()\n",
    "    \n",
    "    #Tokenize\n",
    "    tokenizer= RegexpTokenizer(r\"\\w+\")\n",
    "    raw_tokens_list= tokenizer.tokenize(doc)\n",
    "    \n",
    "    # classics stop_words\n",
    "    cleaned_tokens_list= [w for w in raw_tokens_list if w not in stop_words]\n",
    "    \n",
    "    ##############################\n",
    "    # no rare tokens\n",
    "    non_rare_tokens= [w for w in cleaned_tokens_list if w not in list_rare_words]\n",
    "    \n",
    "    # no more len words\n",
    "    more_than_N= [w for w in non_rare_tokens if len(w) >= min_len_word]\n",
    "    \n",
    "    # only alphabetics chars\n",
    "    if force_is_alpha:\n",
    "        alpha_tokens= [w for w in more_than_N if w.isalpha()]\n",
    "    else: \n",
    "        alpha_tokens = more_than_N\n",
    "          \n",
    "    ###############################\n",
    "    \n",
    "    if rejoin: \n",
    "        return \" \".join(alpha_tokens)\n",
    "    \n",
    "    return alpha_tokens"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "raw_corpus1= \" \".join(df_1.description.values)\n",
    "corpus_cleaned_2= process_text_2(raw_corpus1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(len(raw_corpus1))\n",
    "print(len(set(raw_corpus1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "display_tokens_info(corpus_cleaned_2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Stem & Lem:\n",
    "Stemming is the process of producing the morphological variants of root/base word. Lemmatization brings context to the words."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "doc= df_1.description.sample(1).values[0]\n",
    "doc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "tokenizer= RegexpTokenizer(r\"\\w+\")\n",
    "tokens= tokenizer.tokenize(doc.lower())\n",
    "print(tokens)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# avec PorterStemmer()\n",
    "trans= PorterStemmer()\n",
    "trans_text= [trans.stem(i) for i in tokens]\n",
    "print(trans_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# avec WordNetLemmatizer()\n",
    "trans= WordNetLemmatizer()\n",
    "trans_text= [trans.lemmatize(i) for i in tokens]\n",
    "print(trans_text)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Cleaning function 3: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def process_text_3(doc,rejoin=False, lem_or_stem= \"stem\", list_rare_words= None, min_len_word= 3, force_is_alpha= True):\n",
    "    \"\"\"cf process_text_2 but with stem & lem   \n",
    "    arguments:\n",
    "    ---------\n",
    "    doc: str: the document to process\n",
    "    opts args:\n",
    "    ----------\n",
    "    rejoin: bool: if True return a string else return the list of tokens \n",
    "    lem_or_stem: str: if if lem do lemmentize else stemmentize\n",
    "    list_rare_words: list: a list of rare words to exclude\n",
    "    min_len_word: int: if 1: excldue all tokens with a numeric character\n",
    "    return: \n",
    "    -------\n",
    "    a string (if rejoin is True) or a list of tokens\n",
    "    \"\"\"\n",
    "    \n",
    "    #lis of unique words\n",
    "    if not list_rare_words:\n",
    "        list_rare_words= []\n",
    "        \n",
    "    #lower\n",
    "    doc= doc.lower().strip()\n",
    "    \n",
    "    #Tokenize\n",
    "    tokenizer= RegexpTokenizer(r\"\\w+\")\n",
    "    raw_tokens_list= tokenizer.tokenize(doc)\n",
    "    \n",
    "    # classics stop_words\n",
    "    cleaned_tokens_list= [w for w in raw_tokens_list if w not in stop_words]\n",
    "    \n",
    "     # no rare tokens\n",
    "    non_rare_tokens= [w for w in cleaned_tokens_list if w not in list_rare_words]\n",
    "    \n",
    "    # no more len words\n",
    "    more_than_N= [w for w in non_rare_tokens if len(w) >= min_len_word]\n",
    "    \n",
    "    # only alphabetics chars\n",
    "    if force_is_alpha:\n",
    "        alpha_tokens= [w for w in more_than_N if w.isalpha()]\n",
    "    else: \n",
    "        alpha_tokens = more_than_N\n",
    "          \n",
    "    ###############################\n",
    "    # stem or lem\n",
    "    if lem_or_stem == \"lem\" :\n",
    "        trans= WordNetLemmatizer()\n",
    "        trans_text= [trans.lemmatize(i) for i in alpha_tokens]\n",
    "    else:\n",
    "        trans= PorterStemmer()\n",
    "        trans_text= [trans.stem(i) for i in alpha_tokens]\n",
    "    \n",
    "    ###############################\n",
    "    \n",
    "    if rejoin: \n",
    "        return \" \".join(trans_text)\n",
    "    \n",
    "    return trans_text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "raw_corpus1= \" \".join(df_1.description.values)\n",
    "corpus_cleaned_3= process_text_3(doc,rejoin=False, lem_or_stem= \"lem\", list_rare_words= list_unique_words, min_len_word= 3, force_is_alpha= True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "corpus_cleaned_3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Only english words:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.Series(words.words()).sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(words.words())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(set(words.words()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "eng_words= [i.lower() for i in words.words()]\n",
    "eng_words[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(set(eng_words))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lm= WordNetLemmatizer()\n",
    "eng_words_lem = [lm.lemmatize(i) for i in eng_words]\n",
    "display_tokens_info(eng_words_lem)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "st= PorterStemmer()\n",
    "eng_words_st = [st.stem(i) for i in eng_words]\n",
    "display_tokens_info(eng_words_st)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Cleaning function 4:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def process_text_4(doc,rejoin=True, lem_or_stem= \"stem\", list_rare_words= None, min_len_word= 3, force_is_alpha= True, eng_words= None):\n",
    "    \"\"\"cf process_text_3 but with selection of only english words\n",
    "    arguments:\n",
    "    ---------\n",
    "    doc: str: the document to process\n",
    "    opts args:\n",
    "    ----------\n",
    "    rejoin: bool: if True return a string else return the list of tokens \n",
    "    lem_or_stem: str: if if lem do lemmentize else stemmentize\n",
    "    list_rare_words: list: a list of rare words to exclude\n",
    "    min_len_word: int: if 1: excldue all tokens with a numeric character\n",
    "    return: \n",
    "    -------\n",
    "    a string (if rejoin is True) or a list of tokens\n",
    "    \"\"\"\n",
    "    \n",
    "    #lis of unique words\n",
    "    if not list_rare_words:\n",
    "        list_rare_words= []\n",
    "        \n",
    "    #lower\n",
    "    doc= doc.lower().strip()\n",
    "    \n",
    "    #Tokenize\n",
    "    tokenizer= RegexpTokenizer(r\"\\w+\")\n",
    "    raw_tokens_list= tokenizer.tokenize(doc)\n",
    "    \n",
    "    # classics stop_words\n",
    "    cleaned_tokens_list= [w for w in raw_tokens_list if w not in stop_words]\n",
    "    \n",
    "    # no rare tokens\n",
    "    non_rare_tokens= [w for w in cleaned_tokens_list if w not in list_rare_words]\n",
    "    \n",
    "    # no more len words\n",
    "    more_than_N= [w for w in non_rare_tokens if len(w) >= min_len_word]\n",
    "    \n",
    "    # only alphabetics chars\n",
    "    if force_is_alpha:\n",
    "        alpha_tokens= [w for w in more_than_N if w.isalpha()]\n",
    "    else: \n",
    "         alpha_tokens = more_than_N\n",
    "          \n",
    "    # stem or lem\n",
    "    if lem_or_stem == \"lem\" :\n",
    "        trans= WordNetLemmatizer()\n",
    "        trans_text= [trans.lemmatize(i) for i in alpha_tokens]\n",
    "    else:\n",
    "        trans= PorterStemmer()\n",
    "        trans_text= [trans.stem(i) for i in alpha_tokens]\n",
    "    \n",
    "    ###############################\n",
    "    # in english\n",
    "    if eng_words:\n",
    "        eng_text = [i for i in trans_text if i in eng_words]\n",
    "    else:\n",
    "        eng_text= trans_text\n",
    "    ###############################\n",
    "    \n",
    "    if rejoin: \n",
    "        return \" \".join(eng_text)\n",
    "    \n",
    "    return eng_text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "raw_corpus1= \" \".join(df_1.description.values)\n",
    "corpus_cleaned_4= process_text_4(raw_corpus1,rejoin=False, lem_or_stem= \"stem\", list_rare_words= list_unique_words, min_len_word= 3, force_is_alpha= True, eng_words= None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "display_tokens_info(corpus_cleaned_4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_1[\"clean_desc\"]= df_1.description.apply(process_text_4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_1.isna().mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bag of words: CountVectorizer - Tf-idf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import des librairies\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import nltk\n",
    "import pickle\n",
    "import time\n",
    "from sklearn import cluster, metrics\n",
    "from sklearn import manifold, decomposition\n",
    "import logging"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Preprocessing: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "l_cat = list(set(df_1['product_category']))\n",
    "print(\"catégories : \", l_cat)\n",
    "\n",
    "#afficher y_cat_num (pbm d'ordre 0 à 6) , possibilisé d'utiliser label encoder ici\n",
    "y_cat_num = [(1-l_cat.index(df_1.iloc[i]['product_category'])) for i in range(len(df_1))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(stop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Définition de fonctions communes\n",
    "\n",
    "import time\n",
    "from sklearn import manifold, decomposition\n",
    "\n",
    "# Calcul Tsne, détermination des clusters et calcul ARI entre vrais catégories et n° de clusters\n",
    "def ARI_fct(features) :\n",
    "    time1 = time.time()\n",
    "    num_labels=len(l_cat)\n",
    "    \n",
    "#### utiliser uniquement PCA sans TSNE (utiliser TSNE uniquement pour visualisation)\n",
    "print(\"Dimensions dataset avant réduction PCA : \", features.shape)\n",
    "    pca = decomposition.PCA(n_components=0.99)\n",
    "    feat_pca = pca.fit_transform(features)\n",
    "print(\"Dimensions dataset après réduction PCA : \", feat_pca.shape)\n",
    "    \n",
    "# T-distributed Stochastic Neighbor Embedding\n",
    "    tsne = manifold.TSNE(n_components=2, perplexity=30, n_iter=2000, \n",
    "                                 init='random', learning_rate=200, random_state=42)\n",
    "    X_tsne = tsne.fit_transform(feat_pca)\n",
    "    \n",
    "    # Détermination des clusters à partir des données après Tsne \n",
    "    cls = cluster.KMeans(n_clusters=num_labels, n_init=100, random_state=42)\n",
    "    cls.fit(X_tsne)\n",
    "    ARI = np.round(metrics.adjusted_rand_score(y_cat_num, cls.labels_),4)\n",
    "    time2 = np.round(time.time() - time1,0)\n",
    "    print(\"ARI : \", ARI, \"time : \", time2)\n",
    "    \n",
    "    return ARI, X_tsne, cls.labels_\n",
    "\n",
    "\n",
    "# visualisation du Tsne selon les vraies catégories et selon les clusters\n",
    "def TSNE_visu_fct(X_tsne, y_cat_num, labels, ARI) :\n",
    "    fig = plt.figure(figsize=(15,6))\n",
    "    \n",
    "    ax = fig.add_subplot(121)\n",
    "    scatter = ax.scatter(X_tsne[:,0],X_tsne[:,1], c=y_cat_num, cmap='Set1')\n",
    "    ax.legend(handles=scatter.legend_elements()[0], labels=l_cat, loc=\"best\", title=\"Categorie\")\n",
    "    plt.title('Représentation des descriptions par catégories réelles')\n",
    "    \n",
    "    ax = fig.add_subplot(122)\n",
    "    scatter = ax.scatter(X_tsne[:,0],X_tsne[:,1], c=labels, cmap='Set1')\n",
    "    ax.legend(handles=scatter.legend_elements()[0], labels=set(labels), loc=\"best\", title=\"Clusters\")\n",
    "    plt.title('Représentation des descriptions par clusters')\n",
    "    \n",
    "    plt.show()\n",
    "    print(\"ARI : \", ARI)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# création du bag of words (CountVectorizer et Tf-idf)\n",
    "# CountVectorizer: Convert a collection of text documents to a matrix of token counts.\n",
    "\n",
    "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
    "\n",
    "cvect = CountVectorizer(stop_words='english', max_df=0.95, min_df=1)\n",
    "ctf = TfidfVectorizer(stop_words='english', max_df=0.95, min_df=1)\n",
    "\n",
    "feat = 'clean_desc'\n",
    "cv_fit = cvect.fit(df_1[feat])\n",
    "ctf_fit = ctf.fit(df_1[feat])\n",
    "\n",
    "cv_transform = cvect.transform(df_1[feat])  \n",
    "ctf_transform = ctf.transform(df_1[feat])  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Execution du modèle:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"CountVectorizer : \")\n",
    "print(\"-----------------\")\n",
    "ARI, X_tsne, labels = ARI_fct(cv_transform)\n",
    "print()\n",
    "print(\"Tf-idf : \")\n",
    "print(\"--------\")\n",
    "ARI, X_tsne, labels = ARI_fct(ctf_transform)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Graphique:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    " TSNE_visu_fct(X_tsne, y_cat_num, labels, ARI)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Word2Vec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import tensorflow.keras\n",
    "from tensorflow.keras import backend as K\n",
    "\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras import metrics as kmetrics\n",
    "from tensorflow.keras.layers import *\n",
    "from tensorflow.keras.models import Model\n",
    "import gensim\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Création du modèle Word2Vec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "w2v_size=300\n",
    "w2v_window=5\n",
    "w2v_min_count=1\n",
    "w2v_epochs=100\n",
    "maxlen = 24 # adapt to length of sentences\n",
    "sentences = df_1['clean_desc'].to_list()\n",
    "sentences = [gensim.utils.simple_preprocess(text) for text in sentences]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Création et entraînement du modèle Word2Vec\n",
    "\n",
    "print(\"Build & train Word2Vec model ...\")\n",
    "w2v_model = gensim.models.Word2Vec(min_count=w2v_min_count, window=w2v_window,\n",
    "                                                vector_size=w2v_size,\n",
    "                                                seed=42,\n",
    "                                                workers=1)\n",
    "#                                                workers=multiprocessing.cpu_count())\n",
    "w2v_model.build_vocab(sentences)\n",
    "w2v_model.train(sentences, total_examples=w2v_model.corpus_count, epochs=w2v_epochs)\n",
    "model_vectors = w2v_model.wv\n",
    "w2v_words = model_vectors.index_to_key\n",
    "print(\"Vocabulary size: %i\" % len(w2v_words))\n",
    "print(\"Word2Vec trained\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Préparation des sentences (tokenization)\n",
    "\n",
    "print(\"Fit Tokenizer ...\")\n",
    "tokenizer = Tokenizer()\n",
    "tokenizer.fit_on_texts(sentences)\n",
    "x_sentences = pad_sequences(tokenizer.texts_to_sequences(sentences),\n",
    "                                                     maxlen=maxlen,\n",
    "                                                     padding='post') \n",
    "                                                   \n",
    "num_words = len(tokenizer.word_index) + 1\n",
    "print(\"Number of unique words: %i\" % num_words)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Création de la matrice d'embedding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Création de la matrice d'embedding\n",
    "\n",
    "print(\"Create Embedding matrix ...\")\n",
    "w2v_size = 300\n",
    "word_index = tokenizer.word_index\n",
    "vocab_size = len(word_index) + 1\n",
    "embedding_matrix = np.zeros((vocab_size, w2v_size))\n",
    "i=0\n",
    "j=0\n",
    "    \n",
    "for word, idx in word_index.items():\n",
    "    i +=1\n",
    "    if word in w2v_words:\n",
    "        j +=1\n",
    "        embedding_vector = model_vectors[word]\n",
    "        if embedding_vector is not None:\n",
    "            embedding_matrix[idx] = model_vectors[word]\n",
    "            \n",
    "word_rate = np.round(j/i,4)\n",
    "print(\"Word embedding rate : \", word_rate)\n",
    "print(\"Embedding matrix: %s\" % str(embedding_matrix.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Création du modèle d'embedding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Création du modèle\n",
    "\n",
    "input=Input(shape=(len(x_sentences),maxlen),dtype='float64')\n",
    "word_input=Input(shape=(maxlen,),dtype='float64')  \n",
    "word_embedding=Embedding(input_dim=vocab_size,\n",
    "                         output_dim=w2v_size,\n",
    "                         weights = [embedding_matrix],\n",
    "                         input_length=maxlen)(word_input)\n",
    "word_vec=GlobalAveragePooling1D()(word_embedding)  \n",
    "embed_model = Model([word_input],word_vec)\n",
    "\n",
    "embed_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "embeddings = embed_model.predict(x_sentences)\n",
    "embeddings.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ARI, X_tsne, labels = ARI_fct(embeddings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "TSNE_visu_fct(X_tsne, y_cat_num, labels, ARI)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# BERT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import tensorflow_hub as hub\n",
    "import tensorflow.keras\n",
    "from tensorflow.keras import backend as K\n",
    "\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras import metrics as kmetrics\n",
    "from tensorflow.keras.layers import *\n",
    "from tensorflow.keras.models import Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Bert\n",
    "import os\n",
    "import transformers\n",
    "from transformers import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(tf.__version__)\n",
    "print(tensorflow.__version__)\n",
    "print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\n",
    "print(tf.test.is_built_with_cuda())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fonctions communes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fonction de préparation des sentences\n",
    "def bert_inp_fct(sentences, bert_tokenizer, max_length) :\n",
    "    input_ids=[]\n",
    "    token_type_ids = []\n",
    "    attention_mask=[]\n",
    "    bert_inp_tot = []\n",
    "\n",
    "    for sent in sentences:\n",
    "        bert_inp = bert_tokenizer.encode_plus(sent,\n",
    "                                              add_special_tokens = True,\n",
    "                                              max_length = max_length,\n",
    "                                              padding='max_length',\n",
    "                                              return_attention_mask = True, \n",
    "                                              return_token_type_ids=True,\n",
    "                                              truncation=True,\n",
    "                                              return_tensors=\"tf\")\n",
    "    \n",
    "        input_ids.append(bert_inp['input_ids'][0])\n",
    "        token_type_ids.append(bert_inp['token_type_ids'][0])\n",
    "        attention_mask.append(bert_inp['attention_mask'][0])\n",
    "        bert_inp_tot.append((bert_inp['input_ids'][0], \n",
    "                             bert_inp['token_type_ids'][0], \n",
    "                             bert_inp['attention_mask'][0]))\n",
    "\n",
    "    input_ids = np.asarray(input_ids)\n",
    "    token_type_ids = np.asarray(token_type_ids)\n",
    "    attention_mask = np.array(attention_mask)\n",
    "    \n",
    "    return input_ids, token_type_ids, attention_mask, bert_inp_tot\n",
    "    \n",
    "\n",
    "# Fonction de création des features\n",
    "def feature_BERT_fct(model, model_type, sentences, max_length, b_size, mode='HF') :\n",
    "    batch_size = b_size\n",
    "    batch_size_pred = b_size\n",
    "    bert_tokenizer = AutoTokenizer.from_pretrained(model_type)\n",
    "    time1 = time.time()\n",
    "\n",
    "    for step in range(len(sentences)//batch_size) :\n",
    "        idx = step*batch_size\n",
    "        input_ids, token_type_ids, attention_mask, bert_inp_tot = bert_inp_fct(sentences[idx:idx+batch_size], \n",
    "                                                                      bert_tokenizer, max_length)\n",
    "        \n",
    "        if mode=='HF' :    # Bert HuggingFace\n",
    "            outputs = model.predict([input_ids, attention_mask, token_type_ids], batch_size=batch_size_pred)\n",
    "            last_hidden_states = outputs.last_hidden_state\n",
    "\n",
    "        if mode=='TFhub' : # Bert Tensorflow Hub\n",
    "            text_preprocessed = {\"input_word_ids\" : input_ids, \n",
    "                                 \"input_mask\" : attention_mask, \n",
    "                                 \"input_type_ids\" : token_type_ids}\n",
    "            outputs = model(text_preprocessed)\n",
    "            last_hidden_states = outputs['sequence_output']\n",
    "             \n",
    "        if step ==0 :\n",
    "            last_hidden_states_tot = last_hidden_states\n",
    "            last_hidden_states_tot_0 = last_hidden_states\n",
    "        else :\n",
    "            last_hidden_states_tot = np.concatenate((last_hidden_states_tot,last_hidden_states))\n",
    "    \n",
    "    features_bert = np.array(last_hidden_states_tot).mean(axis=1)\n",
    "    \n",
    "    time2 = np.round(time.time() - time1,0)\n",
    "    print(\"temps traitement : \", time2)\n",
    "     \n",
    "    return features_bert, last_hidden_states_tot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## BERT HuggingFace"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 'bert-base-uncased'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "max_length = 64\n",
    "batch_size = 10\n",
    "model_type = 'bert-base-uncased'\n",
    "model = TFAutoModel.from_pretrained(model_type)\n",
    "sentences = df_1['clean_desc'].to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Création des features\n",
    "\n",
    "features_bert, last_hidden_states_tot = feature_BERT_fct(model, model_type, sentences, \n",
    "                                                         max_length, batch_size, mode='HF')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ARI, X_tsne, labels = ARI_fct(features_bert)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "TSNE_visu_fct(X_tsne, y_cat_num, labels, ARI)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## USE - Universal Sentence Encoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import tensorflow_hub as hub\n",
    "import tensorflow.keras\n",
    "from tensorflow.keras import backend as K\n",
    "\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras import metrics as kmetrics\n",
    "from tensorflow.keras.layers import *\n",
    "from tensorflow.keras.models import Model\n",
    "\n",
    "# Bert\n",
    "import transformers\n",
    "from transformers import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(tf.__version__)\n",
    "print(tensorflow.__version__)\n",
    "print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\n",
    "print(tf.test.is_built_with_cuda())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow_hub as hub\n",
    "\n",
    "embed = hub.load(\"https://tfhub.dev/google/universal-sentence-encoder/4\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def feature_USE_fct(sentences, b_size) :\n",
    "    batch_size = b_size\n",
    "    time1 = time.time()\n",
    "\n",
    "    for step in range(len(sentences)//batch_size) :\n",
    "        idx = step*batch_size\n",
    "        feat = embed(sentences[idx:idx+batch_size])\n",
    "\n",
    "        if step ==0 :\n",
    "            features = feat\n",
    "        else :\n",
    "            features = np.concatenate((features,feat))\n",
    "\n",
    "    time2 = np.round(time.time() - time1,0)\n",
    "    return features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "batch_size = 10\n",
    "sentences = df_1['clean_desc'].to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "features_USE = feature_USE_fct(sentences, batch_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ARI, X_tsne, labels = ARI_fct(features_USE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "TSNE_visu_fct(X_tsne, y_cat_num, labels, ARI)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
